RAW_FIR:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public? final? fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun receive(value: String): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun functionWithLazyBody(): String { LAZY_BLOCK }

IMPORTS:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public? final? fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun receive(value: String): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun functionWithLazyBody(): String { LAZY_BLOCK }

SUPER_TYPES:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public? final? fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun receive(value: String): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun functionWithLazyBody(): String { LAZY_BLOCK }

TYPES:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public? final? [ResolvePhaseWithForAllDeclarationsKey=TYPES] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun receive(value: String): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun functionWithLazyBody(): String { LAZY_BLOCK }

STATUS:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun receive(value: String): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun functionWithLazyBody(): String { LAZY_BLOCK }

CONTRACTS:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=CONTRACTS] fun resolveMe(): R|kotlin/Unit| {
        receive#(functionWithLazyBody#())
    }
    public? final? fun receive(value: String): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun functionWithLazyBody(): String { LAZY_BLOCK }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=IMPLICIT_TYPES_BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        receive#(functionWithLazyBody#())
    }
    public? final? fun receive(value: String): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun functionWithLazyBody(): String { LAZY_BLOCK }

BODY_RESOLVE:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        R|/receive|(R|/functionWithLazyBody|())
    }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] fun receive(value: R|kotlin/String|): R|kotlin/Unit| { LAZY_BLOCK }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] fun functionWithLazyBody(): R|kotlin/String| { LAZY_BLOCK }

NoResolve:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public? final? fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun receive(value: String): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun functionWithLazyBody(): String { LAZY_BLOCK }

BodyResolveWithChildren:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        R|/receive|(R|/functionWithLazyBody|())
    }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] fun receive(value: R|kotlin/String|): R|kotlin/Unit| { LAZY_BLOCK }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] fun functionWithLazyBody(): R|kotlin/String| { LAZY_BLOCK }

CallableBodyResolve:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        R|/receive|(R|/functionWithLazyBody|())
    }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] fun receive(value: R|kotlin/String|): R|kotlin/Unit| { LAZY_BLOCK }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] fun functionWithLazyBody(): R|kotlin/String| { LAZY_BLOCK }

CallableReturnType:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public? final? fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun receive(value: String): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun functionWithLazyBody(): String { LAZY_BLOCK }

AnnotationType:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public? final? [ResolvePhaseWithForAllDeclarationsKey=TYPES] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun receive(value: String): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun functionWithLazyBody(): String { LAZY_BLOCK }

AnnotationsArguments:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        R|/receive|(R|/functionWithLazyBody|())
    }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] fun receive(value: R|kotlin/String|): R|kotlin/Unit| { LAZY_BLOCK }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] fun functionWithLazyBody(): R|kotlin/String| { LAZY_BLOCK }

CallableContracts:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=CONTRACTS] fun resolveMe(): R|kotlin/Unit| {
        receive#(functionWithLazyBody#())
    }
    public? final? fun receive(value: String): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun functionWithLazyBody(): String { LAZY_BLOCK }

DeclarationStatus:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun receive(value: String): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun functionWithLazyBody(): String { LAZY_BLOCK }

ValueParametersTypes:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public? final? [ResolvePhaseWithForAllDeclarationsKey=TYPES] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun receive(value: String): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun functionWithLazyBody(): String { LAZY_BLOCK }

TypeParametersTypes:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public? final? [ResolvePhaseWithForAllDeclarationsKey=TYPES] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun receive(value: String): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? fun functionWithLazyBody(): String { LAZY_BLOCK }

FILE RAW TO BODY:
FILE: topLevelFunctionsWithExpressionBodyAndExplicitType.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        R|/receive|(R|/functionWithLazyBody|())
    }
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] fun receive(value: R|kotlin/String|): R|kotlin/Unit| {
    }
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] fun functionWithLazyBody(): R|kotlin/String| {
        ^functionWithLazyBody String(42)
    }
